#!/usr/bin/env bash

set -eo pipefail  # Exit on error and pipe failures
echo -e "\n--------------- Commence Operation --------------------\n"

# Configurations
readonly DISABLE=0
readonly ENABLE=1

readonly INFO=$(echo -e " [INFO]")
readonly ERROR=$(echo -e " [ERROR]")
readonly SUCCESS=$(echo -e " [SUCCESS]")

readonly CURRENT_DIR="$PWD"
readonly FLEXI_DIR="${HOME}/suckless-flexipatch"
readonly OUT_DIR="${FLEXI_DIR}/output"

readonly REPOS_URL=(
  "https://github.com/bakkeby/dwm-flexipatch"
  "https://github.com/bakkeby/st-flexipatch"
  "https://github.com/bakkeby/dmenu-flexipatch"
  "https://github.com/bakkeby/flexipatch-finalizer"
)

# Create necessary directories
mkdir -p "${FLEXI_DIR}" "${OUT_DIR}"

# Clone the repos
clone_repositories() {
  for repo_url in "${REPOS_URL[@]}"; do
    local repo_name=$(basename "${repo_url}")
    local repo_dir="${FLEXI_DIR}/${repo_name}"

    if [[ -d "${repo_dir}" ]]; then
      echo " ${INFO} ${repo_name} already exists, skipping clone."
      continue
    fi

    echo "Cloning ${repo_name}..."
    if ! git clone -q "${repo_url}" "${repo_dir}"; then
      echo " [ERROR] Failed to clone ${repo_name}" >&2
      exit 1
    fi
  done
}

apply_patches() {
  local target_dir="$1"
  shift
  local -a patches=("$@")
  local config_file="${target_dir}/patches.def.h"

  if [[ ! -f "${config_file}" ]]; then
    echo " [ERROR] patches.def.h not found: ${config_file}" >&2
    exit 1
  fi

  for patch in "${patches[@]}"; do
    sed -i.bak "s/^${patch} ${DISABLE}$/${patch} ${ENABLE}/" "${config_file}"
  done
}

build_and_install() {
  local target_dir="$1"

  pushd "${target_dir}" > /dev/null || exit 1
  sudo make clean > /dev/null
  if ! sudo make install; then
    echo " [ERROR] Failed to install ${target_dir}" >&2
    popd > /dev/null || exit 1
    exit 1
  fi
  popd > /dev/null || exit 1

  echo -e "\n ${SUCCESS} Patching and building ${target_dir}"
}

dwm_patches() {
  echo -e "\n------------------ Patching DWM -----------------------\n"

  local dwm_dir="${FLEXI_DIR}/dwm-flexipatch"
  local -a patches=(
    "ALWAYSCENTER_PATCH"
    "ATTACHBELOW_PATCH"
    "BAR_AWESOMEBAR_PATCH"
    "BAR_FANCYBAR_PATCH"
    "BAR_HEIGHT_PATCH"
    "BAR_LTSYMBOL_PATCH"
    "BAR_STATUS_PATCH"
    "BAR_SYSTRAY_PATCH"
    "BAR_TAGS_PATCH"
    "MOVESTACK_PATCH"
    "NO_TRANSPARENT_BORDERS_PATCH"
    "PERTAG_PATCH"
    "PERTAG_VANITYGAPS_PATCH"
    "VANITYGAPS_MONOCLE_PATCH"
    "VANITYGAPS_PATCH"
  )
  local -a ex_patches=( "BAR_PADDING_VANITYGAPS_PATCH" )

  apply_patches "${dwm_dir}" "${patches[@]}"

  # Disable excluded patches
  for ex_patch in "${ex_patches[@]}"; do
    sed -i.bak "s/^${ex_patch} ${ENABLE}$/${ex_patch} ${DISABLE}/" "${dwm_dir}/patches.def.h"
  done

  build_and_install "${dwm_dir}"
}

st_patches() {
  echo -e "\n------------------ Patching ST ------------------------\n"

  local st_dir="${FLEXI_DIR}/st-flexipatch"
  local -a patches=(
    "ALPHA_PATCH"
    "BOLD_IS_NOT_BRIGHT_PATCH"
    "SCROLLBACK_PATCH"
    "SINGLE_DRAWABLE_BUFFER_PATCH"
    "W3M_PATCH"
    "WIDE_GLYPHS_PATCH"
  )

  apply_patches "${st_dir}" "${patches[@]}"
  build_and_install "${st_dir}"
}

finalizer() {
  echo -e "\n------------------- Finalizer -------------------------\n"

  local fin_dir="${FLEXI_DIR}/flexipatch-finalizer"
  local finalizer_script="${fin_dir}/flexipatch-finalizer.sh"
  local dwm_out="${OUT_DIR}/dwm"
  local st_out="${OUT_DIR}/st"

  if [[ ! -x "${finalizer_script}" ]]; then
    echo " [ERROR] Finalizer script not found or not executable" >&2
    exit 1
  fi

  "${finalizer_script}" -r -d "${FLEXI_DIR}/dwm-flexipatch" -o "${dwm_out}"
  "${finalizer_script}" -r -d "${FLEXI_DIR}/st-flexipatch" -o "${st_out}"

  echo " ${SUCCESS} Build output:"
  echo "  DWM: ${dwm_out}"
  echo "  ST : ${st_out}"
}

# Main execution flow
clone_repositories
dwm_patches
st_patches
finalizer

echo -e "\n ${SUCCESS} Operation successfull, please re-login\n"
