#!/bin/bash

# Exclusive to arch
ArchDistro() {
  local family=("arch" "artix" "endeavouros" "manjaro" "garuda")
  local distro=$(grep '^ID=' /etc/os-release | cut -d '=' -f2)

  if [[ ! ${family[@]} =~ $distro ]]; then
    echo -e "Sorry, Arch or Arch-based only"
    exit
  fi
}

# Failed clone error handling
clone_git() {
  local url="$1"
  local clone_dir="$2"
  local name=$(basename "$url" | cut -d '.' -f1)

  if ! git clone "${url}" "${clone_dir}" &>/dev/null; then
    echo -e "[WARNING] Failed to clone $name, please check your internet connection" 
    exit
  fi
}

# Install with yay or pacman
operation_with() {
  # Check if yay is installed first
  if ! command -v yay &>/dev/null; then
    local DIR="/tmp/yay"
    clone_git https://aur.archlinux.org/yay.git "${DIR}"
    echo -e "[YAY] Yay is not installed, installing Yay"

    # subshell won't affect the current shell behaviour such as $PWD location
    ( cd "$DIR" || exit
      makepkg -si &>/dev/null
    ) && rm -rf "$DIR"
  fi

  local flag="$1"
  shift
  local list=("$@")

  case $flag in
    "-y") local installWith="yay" ;;
    "-p") local installWith="sudo pacman" ;;
  esac

  for package in "${list[@]}"; do
    if ! $installWith -Ss "${package}" &>/dev/null; then
      echo -e "[TYPO] ${package} coulnd't be found, maybe there's typo?"
      continue
    fi

    if $installWith -Q "${package}" &>/dev/null; then
      echo -e "[SKIP] ${package} is already installed, skipping"
      continue
    fi

    case $installWith in
      "yay") local name_installWith="YAY" ;;
      "sudo pacman") local name_installWith="PACMAN" ;;
    esac
    echo -e "[${name_installWith}] installing ${package}"

    if ! $installWith -S --noconfirm "${package}" &>/dev/null; then
      echo -e "[WARNING] Failed to install ${package}, please check your internet connection"
      exit
    fi

    echo -e "[DONE] ${package} is installed"
  done
}

PackagesFont() {
  local list_yay=(
    "noto-fonts-cjk" 
    "noto-fonts-emoji" 
    "ttf-font-awesome"
    "ttf-hack-nerd"
    "ttf-jetbrains-mono-nerd"
    "ttf-liberation"
  )

  operation_with -y "${list_yay[@]}"
}

PackagesEssential() {
  local list_pacman=(
    "base-devel"
    "brightnessctl"
    "cmake"
    "fzf"
    "lazygit"
    "man"
    "make"
    "npm"
    "pacman-contrib"
    "ranger"
    "ripgrep"
    "thunar"
    "tmux"
    "udiskie"
    "udisks2"
    "unzip"
    "wget"
  )

  operation_with -p "${list_pacman[@]}"

  local DIR="$HOME/.config/nvim/"
  if [[ ! -d "$DIR" ]] || [[ -z "$(ls -A "$DIR")" ]]; then
    clone_git https://github.com/MuteSTEVE/nvim.git "${DIR}"
  fi
}

PackagesAudio() {
  local list_pipewire=(
    "pipewire"
    "pipewire-alsa"
    "pipewire-pulse"
    "wireplumber"
  )

  local list_pulseaudio=(
    "pavucontrol"
    "pulseaudio"
    "pulseaudio-alsa"
    "pulseaudio-bluetooth"
  )

  # use declare -n, selected_list is pointed variable out of PackagesAudio scope
  local audio_flag="$1"
  declare -n selected_list

  case $audio_flag in
    "-pa") selected_list="list_pulseaudio" ;;
    "-pw") selected_list="list_pipewire" ;;
  esac

  operation_with -p "${selected_list[@]}"
  case $selected_list in
    "list_pipewire") operation_with -y "pwvucontrol" ;;
  esac
}

PackagesDesktop() {
  local list_pacman=(
    "grim"
    "kwindowsystem"
    "libnotify"
    "slurp"
    "swappy"
    "swaybg"
    "swaync"
    "waybar"
    "wl-clipboard"
    "wofi"
  )

  local list_yay=(
    "python-pywal16"
    "wl-color-picker"
    "zen-browser-bin"
  )

  # use declare -n, selected_list is pointed variable out of PackagesDesktop scope
  local desktop_flag="$1"
  declare -n selected_list

  case $desktop_flag in
    "-h")
      list_pacman+=("hyprland" "xdg-desktop-portal-hyprland") ;;
    "-s")
      list_pacman+=("xdg-desktop-portal-wlr" "xorg-xwayland")
      list_yay+=("swayfx") ;;
  esac

  operation_with -p "${list_pacman[@]}"
  operation_with -y "${list_yay[@]}"
}

PackagesJapanese() {
  local list_pacman=(
    "fcitx5"
    "fcitx5-configtool"
    "fcitx5-mozc"
    "ffmpeg"
    "mpv"
    "ocrfeeder"
    "tesseract"
    "tesseract-data-eng"
    "tesseract-data-chi_sim"
    "tesseract-data-chi_sim_vert"
    "tesseract-data-chi_tra"
    "tesseract-data-chi_tra_vert"
    "tesseract-data-jpn"
    "tesseract-data-jpn_vert"
    "tesseract-data-kor"
    "tesseract-data-kor_vert"
  )

  local list_yay=(
    "anki-bin"
    "textsnatcher-git"
  )

  operation_with -p "${list_pacman[@]}"
  operation_with -y "${list_yay[@]}"

  local DIR=$HOME/.config/mpv/scripts/
  if [[ ! -d "$DIR" ]] || [[ -z "$(ls -A "$DIR")" ]]; then
    mkdir -p "$DIR"
    clone_git 'https://github.com/Ajatt-Tools/mpvacious.git' "${DIR}/subs2srs"
  fi
}

# Copy config files to $HOME if they don't already exist
ConfigDirectories() {
  local dotfiles_DIR=$(find $HOME -type d -name dotfiles)
  local list=(
    ".bashrc"
    ".gitconfig"
    ".config/"
    ".local/"
  )

  # Use ohmybash and change it's theme called "font" with slightly modified ps1 prompt
  local omb_DIR="$HOME/.oh-my-bash/"
  if [[ ! -d "$omb_DIR" ]] || [[ -z "$(ls -A "$omb_DIR")" ]]; then
    bash -c "$(curl -fsSL https://raw.githubusercontent.com/ohmybash/oh-my-bash/master/tools/install.sh)"
    sed -i 's/\$(clock_prompt)/ /g' "$DIR/themes/font/font.theme.sh"
    sed -i 's/\$(hostname)//g' "$DIR/themes/font/font.theme.sh"
  fi

  for copy in "${list[@]}"; do
    cp -rn "$dotfiles_DIR/${copy}" $HOME/
  done
  chmod +x $HOME/.local/bin/*
}

## Wallpaper from wallhaven.cc
DownloadWallpapers() {
  WALLS=(
    # YTTA
    "https://w.wallhaven.cc/full/8o/wallhaven-8opwv2.png" # arisu_(blue_archive)
    "https://w.wallhaven.cc/full/5g/wallhaven-5gyjw3.jpg" # arisu_(blue_archive)
    "https://w.wallhaven.cc/full/1k/wallhaven-1klez3.png" # izuna_(blue_archive)
    "https://w.wallhaven.cc/full/d6/wallhaven-d62oog.png" # izuna_(blue_archive)
    "https://w.wallhaven.cc/full/p9/wallhaven-p9gzvm.jpg" # izuna_(blue_archive)
    "https://w.wallhaven.cc/full/2y/wallhaven-2yxpy6.jpg" # koyuki_(blue_archive)
    "https://w.wallhaven.cc/full/rr/wallhaven-rrep8j.jpg" # momoi_(blue_archive)
    "https://w.wallhaven.cc/full/p9/wallhaven-p9xqpm.jpg" # momoi_(blue_archive) midori_(blue_archive)
    "https://w.wallhaven.cc/full/we/wallhaven-wel3l7.jpg" # momoi_(blue_archive) midori_(blue_archive)
    "https://w.wallhaven.cc/full/9d/wallhaven-9dwr8x.png" # mutsuki_(blue_archive)
    "https://w.wallhaven.cc/full/zy/wallhaven-zyrmpg.png" # mutsuki_(blue_archive)
    "https://w.wallhaven.cc/full/gp/wallhaven-gp2xol.png" # mutsuki_(blue_archive)
  )

  local DIR=$HOME/.local/wallpapers/
  if [[ ! -d "$DIR" ]] || [[ -z "$(ls -A "$DIR")" ]]; then
    mkdir -p "$DIR"
    for img in "${WALLS[@]}"; do
      curl -O --output-dir "$DIR" "${img}" &>/dev/null
      echo -e "[WP] Downloading wallpaper $(basename ${img})"
    done
  fi
}

main() {
  ArchDistro
  ConfigDirectories
  DownloadWallpapers

  PackagesFont
  PackagesAudio -pw    # -pa = pulseaudio; -pw = pipewire;
  PackagesEssential
  PackagesDesktop -s   # -h = hyprland; -s = sway;
  PackagesJapanese
}
main
